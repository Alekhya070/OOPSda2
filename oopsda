DIGITAL ASSIGNMENT 2

NAME: Ganti Alekhya
REG NO: 22BRS1098

PAT QUESTIONS 

1.Write a C program to check whether a number is prime, armstrong, perfect number or not using functions.

Input:

11
Output:

11 is prime number
11 is not a armstrong number
11 is not a perfect number

#include <stdio.h>
#include <math.h>
int is_prime(int n);
int is_armstrong(int n);
int is_perfect(int n);
int main() 
{
    int n;
    printf("Enter an integer: ");
    scanf("%d", &n);
    if (is_prime(n))
    {
        printf("%d is a prime number\n", n);
    }
    else
    {
        printf("%d is not a prime number\n", n);
    }
    if (is_armstrong(n))
    {
        printf("%d is an Armstrong number\n", n);
    } 
    else 
    {
        printf("%d is not an Armstrong number\n", n);
    }
    if (is_perfect(n)) 
    {
        printf("%d is a perfect number\n", n);
    } 
    else
        printf("%d is not a perfect number\n", n
return 0;
}

int is_prime(int n) 
{
    int i;
    if (n <= 1) 
    {
        return 0;
    }
    for (i = 2; i <= sqrt(n); i++) 
    {
        if (n % i == 0) 
        {
            return 0;
        }
    }
    return 1;
}
int is_armstrong(int n) 
{
    int sum = 0, temp = n, digits = 0;
    while (temp > 0) {
        digits++;
        temp /= 10;
    }
    temp = n;
    while (temp > 0) {
        int remainder = temp % 10;
        sum += pow(remainder, digits);
        temp /= 10;
    }
    return (sum == n);
}

int is_perfect(int n) {
    int i, sum = 0;
    for (i = 1; i < n; i++) {
        if (n % i == 0) {
            sum += i;
        }
    }
    return (sum == n);
}

2.Write a c program to find the number of  words,vowels, consonants, space and special characters in a string

INPUT:

*Nothing is impossible in this world.

OUTPUT:

Words = 6

Vowels = 10

Consonants = 20

Space = 5

Special Characters = 2

#include <stdio.h>
int main() {
    char str[1000];
    int words = 0, vowels = 0, consonants = 0, spaces = 0, special_chars = 0;
    int i;
    printf("Enter a string: ");
    fgets(str, sizeof(str), stdin);
    for (i = 0; str[i] != '\0'; i++) {
        if (isalpha(str[i])) {
            if (tolower(str[i]) == 'a' || tolower(str[i]) == 'e' || tolower(str[i]) == 'i' || tolower(str[i]) == 'o' || tolower(str[i]) == 'u') {
                vowels++;
            } else {
                consonants++;
            }
        } else if (isspace(str[i])) {
            words++;
            spaces++;
        } else {
            special_chars++;
 }
    }
words++;
printf("Words = %d\n", words);
printf("Vowels = %d\n", vowels);
printf("Consonants = %d\n", consonants);            
printf("Space = %d\n", spaces);
printf("Special Characters = %d\n", special_chars);
    
return 0;
}

3.Write a C program that accepts a string as input,print the length of the string and display the word fequency, then use pointers to find the first repeated and non-repeated character in the string, and print the output:

POSSIBLE TEST CASES:

INPUT:

SUJITHRA

OUTPUT:

Length of the string is: 8
Word frequency is: 8
No repeated characters found in the string.
First non-repeated character is: S


#include <stdio.h>
#include <string.h>
#define MAX_LENGTH 100
int main() {
    char str[MAX_LENGTH];
    int len, freq[256] = {0}, i;
    char *p, *rep = NULL, *nonrep = NULL;
    printf("Enter a string: ");
    fgets(str, MAX_LENGTH, stdin);
    len = strlen(str) - 1; 
    for (p = str; *p != '\0'; p++) {
        freq[(int)*p]++;
    }
    printf("Length of the string is: %d\n", len); 
    printf("Word frequency is: ");
    for (i = 0; i < 256; i++) {
        if (freq[i] > 0) {
            printf("%c:%d ", i, freq[i]);
        }
    }
    printf("\n");
    for (p = str; *p != '\0'; p++) {
        if (freq[(int)*p] == 1 && nonrep == NULL) {
            nonrep = p;
        } else if (freq[(int)*p] > 1 && rep == NULL) {
            rep = p;
        }
        if (nonrep != NULL && rep != NULL) {
            break;
        }
    }
    if (rep == NULL) {
        printf("No repeated characters found in the string.\n");
    } 
    else {
        printf("First repeated character is: %c\n", *rep);
    }
    if (nonrep == NULL) {
        printf("No non-repeated characters found in the string.\n");
    } 
    else {
        printf("First non-repeated character is: %c\n",*nonrep);
    }
    return 0;
}

4.Write a cprogram to get the employee information name,age,position and Date of joining. Print the employee list based on Alphabaetical order. Display the order of the employees based on date of joining.


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX_EMPLOYEES 100
#define MAX_NAME_LENGTH 50
#define MAX_POSITION_LENGTH 50
#define DATE_LENGTH 11
struct Employee {
    char name[MAX_NAME_LENGTH];
    int age;
    char position[MAX_POSITION_LENGTH];
    char date[DATE_LENGTH];
};
int compareByName(const void *a, const void *b) {
    const struct Employee *ea = (const struct Employee *)a;
    const struct Employee *eb = (const struct Employee *)b;
    return strcmp(ea->name, eb->name);
}
int compareByDate(const void *a, const void *b) {
    const struct Employee *ea = (const struct Employee *)a;
    const struct Employee *eb = (const struct Employee *)b;
    return strcmp(ea->date, eb->date);
}
int main() {
    int n, i;
    struct Employee employees[MAX_EMPLOYEES];
    printf("Enter the number of employees: ");
    scanf("%d", &n);
    getchar();
    for (i = 0; i < n; i++) {
        printf("Enter details of employee %d:\n", i+1); printf("Name: ");
        fgets(employees[i].name, MAX_NAME_LENGTH, stdin);
        employees[i].name[strcspn(employees[i].name, "\n")] = '\0'; 
        printf("Age: ");
        scanf("%d", &employees[i].age);
        getchar(); 
        printf("Position: ");
        fgets(employees[i].position, MAX_POSITION_LENGTH, stdin);
        employees[i].position[strcspn(employees[i].position, "\n")] = '\0'; 
        printf("Date of joining (dd/mm/yyyy): ");
        fgets(employees[i].date, DATE_LENGTH, stdin);
        employees[i].date[strcspn(employees[i].date, "\n")] = '\0'; 
    }
    qsort(employees, n, sizeof(struct Employee), compareByName);
    printf("\nEmployee List sorted by name:\n\n");
    for (i = 0; i < n; i++) {
        printf("Name: %s\n", employees[i].name);
        printf("Age: %d\n", employees[i].age);
        printf("Position: %s\n", employees[i].position);
        printf("Date of Joining: %s\n\n", employees[i].date);
    }
    qsort(employees, n, sizeof(struct Employee), compareByDate);
    printf("\nEmployee List sorted by date of joining:\n\n");
    for (i = 0; i < n; i++) {
        printf("Name: %s\n", employees[i].name);
    }
    return 0;
}

5.Get the three angles of a triangle as input.

find the count of the type of the triangle.

Continue the process for 5 times.

If the sum of the three angles is greater than 180 then prompt for correct values. (the sum of all internal angles of a triangle is always equal to 180°). Keep the count of the wrong entries also.

Acute Angled Triangle (all three angles less than 90°)

Right-Angled Triangle (one angle that measures exactly 90°)

Obtuse Angled Triangle (one angle that measures more than 90°)


#include <stdio.h>
int main() {
    int i, j, a, b, c, sum, acute = 0, right = 0, obtuse = 0, wrong = 0;
    for (i = 1; i <= 5; i++) {
        printf("Enter the three angles of triangle %d:\n",i);
        scanf("%d %d %d", &a, &b, &c);
        sum = a + b + c;
        if (sum > 180) {
            printf("Wrong Entry try again\n");
            wrong++;
            i--;
            continue;
        }
        if (a < b) {
            j = a;
            a = b;
            b = j;
        }
        if (a < c) {
            j = a;
            a = c;
            c = j;
        }
        if (a*a == b*b + c*c) {
            printf("Right-Angled Triangle\n");
            right++;
        } else if (a*a < b*b + c*c) {
            printf("Acute Angled Triangle\n");
            acute++;
        } else {
            printf("Obtuse Angled Triangle\n");
            obtuse++;
        }
    }
    printf("\nAcute Angled Triangle: %d\n", acute);
    printf("Right Angled Triangle: %d\n", right);
    printf("Obtuse Angled Triangle: %d\n", obtuse);
    printf("Wrong Entries: %d\n", wrong);
    return 0;
}



CAT PAPER 1

1.The temperature in Chennai exists somewhere between 280C to 330C in a particular 
week. The temperature in Delhi is 8
0C lesser than in Chennai. Likewise, the 
temperature in Haveri is 5
0C more than that of Chennai. Write a C program to find the 
temperature of Gangtok for a particular week, which is the temperature difference 
between Delhi and Haveri. Get the temperature of Chennai (
0C) as input for the week 
of 7 days and the temperature of Gangtok (
0C) as output for the week of 7 days. 
Implement the program using arrays and validate the rules

#include <stdio.h>

int main() {
    float chennai[7], delhi[7], haveri[7], gangtok[7];
    float chennaiTemp, gangtokTemp, delhiTemp, haveriTemp;
    int i;

    printf("Enter the temperature in Chennai for the week:\n");
    for (i = 0; i < 7; i++) {
        printf("Day %d: ", i+1);
        scanf("%f", &chennai[i]);
    }

    for (i = 0; i < 7; i++) {
        delhi[i] = chennai[i] - 8.0;
        haveri[i] = chennai[i] + 5.0;
    }

    for (i = 0; i < 7; i++) {
        gangtok[i] = haveri[i] - delhi[i];
    }

    chennaiTemp = delhiTemp = haveriTemp = gangtokTemp = 0.0;
    for (i = 0; i < 7; i++) {
        chennaiTemp += chennai[i];
        delhiTemp += delhi[i];
        haveriTemp += haveri[i];
        gangtokTemp += gangtok[i];
    }
    chennaiTemp /= 7.0;
    delhiTemp /= 7.0;
    haveriTemp /= 7.0;
    gangtokTemp /= 7.0;

    printf("\nAverage temperatures for the week:\n");
    printf("Chennai: %.2f C\n", chennaiTemp);
    printf("Delhi: %.2f C\n", delhiTemp);
    printf("Haveri: %.2f C\n", haveriTemp);
    printf("Gangtok: %.2f C\n", gangtokTemp);

    return 0;
}

2.Samantha is an avid collector of lucky numbers. She believes that each number has 
its own unique energy and can bring good luck if used correctly. One day, she came 
across a new number that had a mysterious aura and she could not resist finding out 
more about it. She heard that the number may fall within the digit combinations, so 
she decided to sum up all the four-digit even numbers and then keep adding the 
digits of the summation until a single digit is found to unlock its secrets. Later, she 
must check again whether the single digit is odd or even. If odd, then you must say 
“Odd Found” otherwise you must return “Even found”. Write a C program to help 
her in finding the mysterious number

#include <stdio.h>

int getSumOfDigits(int num);
int isOdd(int num);

int main() {
    int sum = 0;
    int numCount = 0;

    for(int i = 1000; i <= 9998; i += 2) {

        sum += i;
        numCount++;
    }

    while(sum > 9) {
        sum = getSumOfDigits(sum);
    }

    if(isOdd(sum)) {
        printf("Odd Found\n");
    } else {
        printf("Even Found\n");
    }
    
    printf("Total even four-digit numbers: %d", numCount);
    
    return 0;
}

int getSumOfDigits(int num) {
    int sum = 0;
    while(num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int isOdd(int num) {
    if(num % 2 == 1) {
        return 1;
    } else {
        return 0;
    }
}

3.  A digital locker in the bank is protected with a security mechanism. To open the 
locker a password of 9 characters is required. The input characters should be 
accepted as 3x3 matrix and two diagonal characters of the matrix are concatenated 
(refer to the example given below) and compared with the password already stored 
in a character array for authentication. Write a C program to implement this logic 
for password verification. 

#include <stdio.h>
#include <string.h>

#define PASSWORD "123456789" 

int main() {
    char matrix[3][3]; 
    char diagonal[2]; 
    printf("Enter a 3x3 matrix:\n");
    for(int i = 0; i < 3; i++) {
        for(int j = 0; j < 3; j++) {
            scanf(" %c", &matrix[i][j]);
        }
    }
    diagonal[0] = matrix[0][0];
    diagonal[1] = matrix[1][1];
    diagonal[2] = '\0'
    if(strcmp(diagonal, PASSWORD) == 0) {
        printf("Password accepted!\n");
    } else {
        printf("Password incorrect!\n");
    }

    return 0;
}

4. An international school of class 7 with a class strength of 25, decided to assign 
additional marks for their students in Maths subject, to increase their class average. 
The additional marks were given to each student based on their month of birth. That is 
she was to give that number (month of birth) as the booster marks. The teacher wants 
to find the class average for the original marks as well as for the revised marks. She
wants to decide whether to implement this revision in marks or not based on the 
significant improvement in the class average. 
Write a C program to help the teacher get the class average for the original marks as 
well as the revised marks. 
She wants to know whether to implement this revision or not. This is decided based 
on the condition that the revision should bring a significant increase in the class 
average of 5 marks. Else, she is not planning to implement this revision in the marks 
strategy. Write the program to display this decision of “Can implement – Significant 
increase in class average” or “Need not implement – No significant increase in class 
average”. Keep every operation in this program separate. Get the students’ original 
marks and the month of their birth as input

#include <stdio.h>

int main() {
    int original_marks[25], revised_marks[25], birth_month[25];
    int original_total = 0, revised_total = 0;
    float original_average, revised_average;
    int i;

    printf("Enter the students' original marks and month of birth:\n");
    for (i = 0; i < 25; i++) {
        printf("Student %d: ", i+1);
        scanf("%d %d", &original_marks[i], &birth_month[i]);

        revised_marks[i] = original_marks[i] + birth_month[i];
        revised_total += revised_marks[i];

        original_total += original_marks[i];
    }

    original_average = (float) original_total / 25;
    revised_average = (float) revised_total / 25;

    if (revised_average - original_average >= 5) {
        printf("Can implement - Significant increase in class average\n");
    } else {
        printf("Need not implement - No significant increase in class average\n");
    }

    return 0;
}

5.Paul is provided with a number “x” whose scope will remain throughout the program. 
Using the concept of recursion, help Paul to write a “C program” for finding the value 
of (x)n where n should be less than or equal to 5.

#include <stdio.h>
int power(int x, int n);
int main() {
    int x, n, result;
    printf("Enter a value for x: ");
    scanf("%d", &x);
    printf("Enter a value for n (less than or equal to 5): ");
    scanf("%d", &n);
    result = power(x, n);
    printf("%d raised to the power of %d is %d\n", x, n, result);
    return 0;
}
int power(int x, int n) {
    if (n == 0) {
        return 1;
    } else if (n == 1) {
        return x;
    } else {
        return x * power(x, n-1);
    }
}



CAT PAPER 2

1.Write a C program to divide the integer array into two halves using function 
recursion. Call the user-defined “divide” function recursively, with the left half 
of the split array being passed as an argument for that function. Let the 
recursive function to get executed until the array size becomes one. Count the 
number of iterations to reach the base condition. Explain the working 
procedure of recursive function with stack structure

#include <stdio.h>
void divide(int arr[], int start, int end, int* count)
{
    if (start == end) 
    {
        return;
    }
    int mid = (start + end) / 2;
    divide(arr, start, mid, count);
    (*count)++;
    divide(arr, mid + 1, end, count);
}
int main() 
{
    int arr[] = {1, 2, 3, 4, 5, 6};
    int n = sizeof(arr) / sizeof(int);
    int count = 0;
    divide(arr, 0, n - 1, &count);
    printf("Number of iterations: %d\n", count);
    
    return 0;
}

2.Consider that you are going to analyze the characters in the given string. Write 
a C program to extract the characters in the given string and print whether the 
character is an uppercase alphabet, lowercase alphabet, digits, whitespace, 
special symbols. Print the count of each category by storing their counts in an 
array. Use appropriate looping constructs to implement this.

#include <stdio.h>
#include <ctype.h>
int main() 
{
    char str[] = "Hello 123!";
    int counts[5] = {0}; 
    int i;
    for (i = 0; str[i] != '\0'; i++) 
    {
        char c = str[i];
        if (isupper(c)) 
        {
            printf("%c is an uppercase alphabet\n", c);
            counts[0]++;
        }
        else if (islower(c)) 
        {
            printf("%c is a lowercase alphabet\n", c);
            counts[1]++;
        }
        else if (isdigit(c)) 
        {
            printf("%c is a digit\n", c);
            counts[2]++;
        }
        else if (isspace(c)) 
        {
            printf("%c is a whitespace\n", c);
            counts[3]++;
        }
        else 
        {
            printf("%c is a special symbol\n", c);
            counts[4]++;
        }
    }
    
    printf("Count of uppercase alphabets: %d\n", counts[0]);
    printf("Count of lowercase alphabets: %d\n", counts[1]);
    printf("Count of digits: %d\n", counts[2]);
    printf("Count of whitespaces: %d\n", counts[3]);
    printf("Count of special symbols: %d\n", counts[4]);
    
    return 0;
}

3. c program to find the sum of the series 1!/1+2!/2+3!/3+4!/4+5!/5 ... n!/n by utilizing user defined recursive function? Get the value of n from the 
user. Do not use any storage classes. Without returning the calculated result 
from the function, display the result in main 

#include <stdio.h>

double calculate_factorial(int n) {
    if (n == 1) {
        return 1;
    } else {
        return n * calculate_factorial(n-1);
    }
}

int main() {
    int n;
    double sum = 0;
    
    printf("Enter the value of n: ");
    scanf("%d", &n);
    
    for (int i = 1; i <= n; i++) {
        sum += calculate_factorial(i) / i;
    }
    
    printf("Sum of the series = %lf\n", sum);
    
    return 0;
}

4.ABC car showroom sells various types of cars such as Hatchback, Sedan, 
SUVs, and MUV. Due to the year-end sale, the showroom provides a 3%, 5%, 
10%, and 15% discount for various car models Hatchback, Sedan, SUV, and 
MUV respectively. Also applies 12% of GST for the total amount of purchase 
Write a C program to implement the above scenario which will read the 
type_of_the_car, price_of_the_car and extra-fitting_price_of_the_car as input 
from the user and estimate the Net amount to be paid to the showroom. If the 
type of car is other than Hatchback, Sedan, SUV, and MUV then display 
“Invalid Type”.

#include <stdio.h>

int main() {
    char car_type[20];
    float price, extra_fitting, total, discount, gst, net;

    printf("Enter the car type (Hatchback, Sedan, SUV, MUV): ");
    scanf("%s", car_type);

    printf("Enter the price of the car: ");
    scanf("%f", &price);

    printf("Enter the price of extra fittings: ");
    scanf("%f", &extra_fitting);

    if (strcmp(car_type, "Hatchback") == 0) {
        total = price + extra_fitting;
        discount = total * 0.03;
        gst = (total - discount) * 0.12;
        net = total - discount + gst;
    } else if (strcmp(car_type, "Sedan") == 0) {
        total = price + extra_fitting;
        discount = total * 0.05;
        gst = (total - discount) * 0.12;
        net = total - discount + gst;
    } else if (strcmp(car_type, "SUV") == 0) {
        total = price + extra_fitting;
        discount = total * 0.10;
        gst = (total - discount) * 0.12;
        net = total - discount + gst;
    } else if (strcmp(car_type, "MUV") == 0) {
        total = price + extra_fitting;
        discount = total * 0.15;
        gst = (total - discount) * 0.12;
        net = total - discount + gst;
    } else {
        printf("Invalid car type\n");
        return 0;
    }

    printf("Total amount = %.2f\n", total);
    printf("Discount = %.2f\n", discount);
    printf("GST = %.2f\n", gst);
    printf("Net amount = %.2f\n", net);

    return 0;
}

5.Write a C Program that reads the input as a string from the user in main (). (1 
mark)
The input should be a sentence with two words. Pass this string to a function.(1 
mark) 
Inside the function do the following operations:  For the first word, keep only the first character of the word to be in upper 
case and the rest of the characters in lower case. (1 mark)  For the second word, convert all the characters into upper case letter. (1 
mark)  Print the revised string consisting of the two words in the function itself 
(1 mark)  Find the length of the entire string. Print its length in the function itself in 
the next line of the revised string. Use appropriate string function to print 
this result in the next line. (1 mark)  Return the length of the string, if the length is less than 20. Else return the 
size of the string. (2 marks)
Consider the input string given by the user is:  “computer programming”  Revised string to be printed in the function is “Computer 
PROGRAMMING”

The length of a string is the number of characters in the string, excluding the null terminator,
 while the size of a string is the total number of bytes allocated for the string, including the null terminator.
In other words, the size includes the length plus one for the null terminator.

For the input string "computer programming", the revised string to be printed in the function is "Computer PROGRAMMING".
The length of this string is 20, so the function will return the size of the string, which is also 20.

#include <stdio.h>

void processString(char *inputString);

int main() {
    char inputString[100];

    printf("Enter a sentence with two words: ");
    fgets(inputString, 100, stdin);

    processString(inputString);

    return 0;
}

void processString(char *inputString) 
{

}
